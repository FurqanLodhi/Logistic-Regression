# -*- coding: utf-8 -*-
"""21100032.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PLZW6fABaeT8vcIDKxOKrRQALmQwIAh6

# Imports
"""

import numpy as np
import scipy as sp
import pandas as pd
from matplotlib import pyplot 
import re
import glob

from google.colab import drive
drive.mount('/content/drive')

!gdown --id 1n0j5zbMXMVnLPUqadFNcCxiZRu0ChoXL
!unzip "Programming_Assignment_3.zip" -d "/content/new_folder"

"""# PreProcessing"""

stopWords = open("/content/new_folder/Dataset/stop_words.txt")
stopWordsList = stopWords.readlines()

# stopWordsList

stopListNoNewLine = []
for x in stopWordsList[:-1]:
    stopListNoNewLine.append(x[:-1])

stopListNoNewLine.append(stopWordsList[-1])

positiveWords = open("/content/new_folder/Dataset/positive_words.txt")
positiveWordList = positiveWords.readlines()
# positiveWordList

positiveListNoNewLine = []
for x in positiveWordList[:-1]:
    positiveListNoNewLine.append(x[:-1])

positiveListNoNewLine.append(positiveWordList[-1])

# positiveListNoNewLine

negativeWords = open("/content/new_folder/Dataset/negative_words.txt",encoding="ISO-8859-1")
negativeWordList = negativeWords.readlines()


negativeListNoNewLine = []
for x in negativeWordList[:-1]:
    negativeListNoNewLine.append(x[:-1])

negativeListNoNewLine.append(negativeWordList[-1])

# negativeListNoNewLine

posTrainList = []
negTrainList = []
labelNeg = []
labelPos = []

for negTrainFile in glob.glob("/content/new_folder/Dataset/train/neg/*"):
    negRev = open(negTrainFile)
    eachRevNeg = negRev.readlines()
    negTrainList.append(eachRevNeg[0])
    labelNeg.append(0)
    
    
for posTrainFile in glob.glob("/content/new_folder/Dataset/train/pos/*"):
    posRev = open(posTrainFile ,encoding="utf8")
    eachRevPos = posRev.readlines()
    posTrainList.append(eachRevPos[0])
    labelPos.append(1)

# len(negTrainList)

negativeReviews = []
negRevFull = []
negRevWords = []

for eachNegRev in negTrainList:
  negativeReviews.append(re.sub('[^\w\s]+', ' ', eachNegRev))

# negativeReviews

for eachNegRev in negativeReviews:
    lowerRev = eachNegRev.casefold()
    negRevWords = lowerRev.split()
    for eachNegRevWord in negRevWords:
        for eachStopWord in stopListNoNewLine:
            if eachStopWord in negRevWords:
                negRevWords.remove(eachStopWord)
    negString = ' '.join(negRevWords)
    negRevFull.append(negString)

# len(negRevFull)

positiveReviews = []
posRevFull = []
posRevWords = []

for eachPosRev in posTrainList:
  positiveReviews.append(re.sub('[^\w\s]+', ' ', eachPosRev))

# positiveReviews

for eachPosRev in positiveReviews:
    lowerPosRev = eachPosRev.casefold()
    posRevWords = lowerPosRev.split()
    for eachPosRevWord in posRevWords:
        for eachStopWord in stopListNoNewLine:
            if eachStopWord in posRevWords:
                posRevWords.remove(eachStopWord)
    posString = ' '.join(posRevWords)
    posRevFull.append(posString)

# posRevFull

labelsTrain = labelNeg + labelPos

# labelsTrain

posTestList = []
negTestList = []
labelTestNeg = []
labelTestPos = []

for negTestFile in glob.glob("/content/new_folder/Dataset/test/neg/*"):
    negTestRev = open(negTestFile)
    eachRevNegTest = negTestRev.readlines()
    negTestList.append(eachRevNegTest[0])
    labelTestNeg.append(0)
    
    
for posTestFile in glob.glob("/content/new_folder/Dataset/test/pos/*"):
    posTestRev = open(posTestFile ,encoding="utf8")
    eachRevPosTest = posTestRev.readlines()
    posTestList.append(eachRevPosTest[0])
    labelTestPos.append(1)

# len(negTestList)
# len(posTestList)

negativeTestReviews = []
negTestRevFull = []
negTestRevWords = []

for eachNegTestRev in negTestList:
  negativeTestReviews.append(re.sub('[^\w\s]+', ' ', eachNegTestRev))

# negativeTestReviews

for eachNegTestRev in negativeTestReviews:
    lowerTestRev = eachNegTestRev.casefold()
    negTestRevWords = lowerTestRev.split()
    for eachNegTestRevWord in negTestRevWords:
        for eachStopWord in stopListNoNewLine:
            if eachStopWord in negTestRevWords:
                negTestRevWords.remove(eachStopWord)
    negTestString = ' '.join(negTestRevWords)
    negTestRevFull.append(negTestString)

# negTestRevFull

positiveTestReviews = []
posTestRevFull = []
posTestRevWords = []

for eachPosTestRev in posTestList:
  positiveTestReviews.append(re.sub('[^\w\s]+', ' ', eachPosTestRev))

# len(positiveTestReviews)

for eachPosTestRev in positiveTestReviews:
    lowerPosTestRev = eachPosTestRev.casefold()
    posTestRevWords = lowerPosTestRev.split()
    for eachPosTestRevWord in posTestRevWords:
        for eachStopWord in stopListNoNewLine:
            if eachStopWord in posTestRevWords:
                posTestRevWords.remove(eachStopWord)
    posTestString = ' '.join(posTestRevWords)
    posTestRevFull.append(posTestString)

# len(posTestRevFull)

labelsTest = labelTestNeg + labelTestPos

# len(labelsTest)

trainingReviews = negRevFull + posRevFull

# len(trainingReviews)

testingReviews = negTestRevFull + posTestRevFull

"""# Feature Extraction"""

train_p = []
train_n = []
for rev in trainingReviews:
  pos = 0
  neg = 0
  review = str(rev)
  words = review.split()
  for word in words:
    if word in positiveListNoNewLine:
      pos = pos + 1
    if word in negativeListNoNewLine:
      neg = neg + 1
  train_p.append(pos)
  train_n.append(neg)

# len(train_n)

test_p = []
test_n = []
for rev in testingReviews:
  pos = 0
  neg = 0
  review = str(rev)
  words = review.split()
  for word in words:
    if word in positiveListNoNewLine:
      pos = pos + 1
    if word in negativeListNoNewLine:
      neg = neg + 1
  test_p.append(pos)
  test_n.append(neg)

# len(test_p)

biases = np.ones((len(train_n),1))

trainX = np.array((train_n, train_p))

trainX = np.transpose(trainX)

trainX = np.append(biases, trainX, axis = 1)

trainY = np.array(labelsTrain)

testX = np.array((test_n, test_p))

testX = np.transpose(testX)

testX = np.append(biases, testX, axis = 1)

testY = np.array(labelsTest)

# trainX.shape

"""# Part 1"""

def sigmoid(x):
  return 1/(1+np.exp(-x))

def pred(X, thetas):
  z = np.dot(X, thetas)
  h_x = sigmoid(z)
  return h_x

def crossEntropy(X, Y, thetas):
  m = 25000
  h_x = pred(X,thetas)
  # print(h_x.shape)
  # print(Y.shape)
  Y = Y.reshape(-1, 1)
  J = -1/m * np.sum(Y*np.log(h_x)+(1-Y)*np.log(1-h_x))
  return J

def gradDesc(X, Y, alpha, n_epoch, thetas):
  m = 25000
  J = list()
    

  for epoch in range(n_epoch):
      for i in range(X.shape[0]):
          h_x = pred(X[i], thetas) 
          for j in range(X.shape[1]):
              thetas[j] = thetas[j] - alpha*1/m * np.dot(X[i][j], np.subtract(h_x, Y[i]))
      J.append(crossEntropy(X, Y, thetas))

  return thetas, J

w = np.zeros((3,1))

thetas, J = gradDesc(trainX, trainY, 0.01, 100, w)

thetas

J

def eval(X, Y, thetas, J):
  predictions = pred(X,thetas)
  predictedLabels = []
  for i in predictions:
    if i >= 0.5:
      predictedLabels.append(1)
    else:
      predictedLabels.append(0)
  correct = 0
  for i in range(25000):
    if predictedLabels[i] == Y[i]:
      correct = correct + 1
  print("Accuracy is: ", (correct/25000)*100, "%")

  print("\n")

  truePos = 0
  trueNeg = 0
  falsePos = 0
  falseNeg = 0

  for i in range(25000):
    if predictedLabels[i] == 1 and Y[i] == 1:
      truePos += 1

    if predictedLabels[i] == 0 and Y[i] == 0:
      trueNeg += 1

    if predictedLabels[i] == 1 and Y[i] == 0:
      falsePos += 1
    
    if predictedLabels[i] == 0 and Y[i] == 1:
      falseNeg += 1
      
  conf_M = np.array([[truePos,falsePos],
                    [falseNeg,trueNeg]])
  print("Confusion Matrix:\n", conf_M)

  print("\n")

  epochs = [i for i in range(100)]
  pyplot.plot(epochs, J)
  pyplot.xlabel("Epochs")
  pyplot.ylabel("J")

eval(testX, testY, thetas, J)

"""# Part 2"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

logReg = LogisticRegression()

logReg.fit(trainX, trainY)
h_x = logReg.predict(testX)
accuracy = accuracy_score(h_x, testY)
print("Accuracy: ", accuracy*100, "%")

confMat = confusion_matrix(h_x, testY)
print("Confusion Matrix: \n", confMat)